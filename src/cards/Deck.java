package cards;

import java.util.Random;

public class Deck {

    //static (not object specific) values for creating a deck
    public static final String[] SUITE = {"Diamond", "Spade", "Hearts", "Clubs"};
    public static final String[] NAMES =
    {"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King"};
    public static final int[] VALUES = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10};


    //deck of 52 card objects, yet to fill it in each card object
    //this gets updated by the Deck constructor, as a fresh deck of cards
    //this gets randomised by the shuffleDeck method
    protected Cards[] cards = new Cards[52];



    //Deck constructor with a zero input parameter signature
    //when you create the below deck object, you are in fact creating a Card[] array of card objects
    public Deck(){
        int idx = 0;
        for(int i = 0; i < SUITE.length; i++){
            String suite = SUITE[i];
            for(int j = 0;  j < NAMES.length; j++){
                String name = NAMES[j];
                int value = VALUES[j];
                Cards card = new Cards(suite, name, value);
                //index for all 52 cards
                cards[idx] = card;
                idx++;
            }
        }
    }


    public void shuffleDeck(){
        Random random = new Random();

        //cards.length is fixed at 52
        //i starts at 51
        for(int i = cards.length-1; i > 0; i--){

            //pick random index from 0 to i(e.g. excludes 52)
            //next loop excludes 51 and above
            //idx starts from 0 to 51
            int idx = random.nextInt(i+1);

            //temporary Cards object 'temp' to hold the last cards on top
            //'cards' instantiated object is assumed to already be generated by Deck constructor before we use shuffle
            //both i and idx are bounded by a decreasing index counter
            //essentially swapping cards[i] and cards[idx]
            Cards temp = cards[i];
            cards[i] = cards[idx];
            cards[idx] = temp;
        }
    }


    //overloaded get method, picked at specified position from the cards array (Card[]) at line 17
    public Cards get(){
        return this.get(0);
    }   

    //cards instaced at line 17, generated by Deck object is returned
    public Cards get(int pos){
        return this.cards[pos];
    }
    
    
}
